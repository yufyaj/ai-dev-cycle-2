name: Claude Autofix After Failed CI

on:
  workflow_run:
    workflows: ["PR CI & Security"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: claude-autofix-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  autofix:
    name: Autofix when CI failed (Draft only)
    if: >-
      ${{ github.event.workflow_run.conclusion == 'failure' &&
          github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR and guards
        id: pr
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const wr = context.payload.workflow_run;
            if (!wr.pull_requests || wr.pull_requests.length === 0) {
              core.setOutput('skip', 'true');
              return;
            }
            const number = wr.pull_requests[0].number;
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            // Only own repo & draft
            if (pr.head.repo.full_name !== `${owner}/${repo}` || !pr.draft) {
              core.setOutput('skip', 'true');
              return;
            }
            // Skip if labeled no-autofix
            const labels = pr.labels.map(l => l.name);
            if (labels.includes('no-autofix')) { core.setOutput('skip', 'true'); return; }

            // Count previous autofix commits
            const commits = await github.paginate(github.rest.pulls.listCommits, { owner, repo, pull_number: number, per_page: 100 });
            const tagged = commits.filter(c => (c.commit.message || '').includes('[autofix:'));
            const runCount = tagged.length;
            core.setOutput('runCount', String(runCount));
            if (runCount >= (process.env.MAX_RUNS ? parseInt(process.env.MAX_RUNS) : 5)) {
              core.setOutput('skip', 'true');
              // add needs-attention label
              try { await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: ['needs-attention'] }); } catch {}
              return;
            }
            // Cooldown check: last tagged commit age
            if (tagged.length > 0) {
              const last = tagged[tagged.length - 1];
              const ts = new Date(last.commit.author.date).getTime();
              const now = Date.now();
              const minutes = (now - ts) / 60000;
              if (minutes < (process.env.COOLDOWN ? parseInt(process.env.COOLDOWN) : 1)) {
                core.setOutput('skip', 'true');
                return;
              }
            }

            core.setOutput('number', String(number));
            core.setOutput('branch', pr.head.ref);
            core.setOutput('skip', 'false');
          result-encoding: string
          github-token: ${{ secrets.GITHUB_TOKEN }}
          MAX_RUNS: ${{ vars.CLAUDE_AUTOFIX_MAX_RUNS || '5' }}
          COOLDOWN: ${{ vars.CLAUDE_AUTOFIX_COOLDOWN_MINUTES || '1' }}

      - name: Checkout PR branch
        if: ${{ steps.pr.outputs.skip != 'true' }}
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          ref: ${{ steps.pr.outputs.branch }}
          fetch-depth: 0

      - name: Claude Autofix (tests/security/review)
        if: ${{ steps.pr.outputs.skip != 'true' }}
        uses: anthropics/claude-code-action@d8f249ecdfa45f54899e00f42672e02eb40933e9 # v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: false
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ steps.pr.outputs.number }}

            The latest PR CI failed (tests and/or security checks). Analyze the failing checks
            and implement minimal, safe fixes directly in the branch, keeping commits small.

            Policy:
            - Tests/Lint: fix compilation/test failures with minimal diff.
            - Security:
              * Semgrep: apply recommended remediations (validation/escaping).
              * Gitleaks: remove/mask new plaintext secrets; switch to env vars. Do NOT rewrite history or rotate keys; leave a comment with instructions.
              * Trivy: prefer patch/minor updates for vulnerable dependencies; add safe Dockerfile hardening.
              * CodeQL: only safe patterns (prepared statements, path validation, escaping).
            - Large/hard changes: post a comment describing the required manual steps instead of attempting risky changes.

            After changes, commit with a message starting with [autofix:tests] or [autofix:security] or [autofix:review].
            Post a PR comment summarizing changes and next steps.

          claude_args: |
            --max-turns ${{ vars.CLAUDE_MAX_TURNS || '6' }}
            --allowedTools "${{ vars.CLAUDE_ALLOWED_TOOLS_FIX }}"

