name: PR自動テスト・レビュー

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR番号（オプション）'
        required: false
        type: number

permissions:
  contents: read
  pull-requests: write
  checks: write
  id-token: write

jobs:
  auto-test:
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: 対象パッケージを判別
        id: detect-package
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "ブランチ名: ${BRANCH_NAME}"

          # Issue番号を抽出 (例: feature/frontend/issue-1 -> 1)
          if [[ $BRANCH_NAME =~ issue-([0-9]+) ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
            echo "Issue番号: ${ISSUE_NUMBER}"

            # Issueのラベルを取得
            LABELS=$(gh issue view ${ISSUE_NUMBER} --json labels --jq '.labels[].name' | tr '\n' ',' || echo "")
            echo "Issueラベル: ${LABELS}"

            # tdd-implementラベルから判別
            if [[ $LABELS == *"tdd-implement:frontend"* ]]; then
              PACKAGE="frontend"
            elif [[ $LABELS == *"tdd-implement:backend"* ]]; then
              PACKAGE="backend"
            else
              echo "⚠️ tdd-implementラベルが見つかりません。テストをスキップします。"
              PACKAGE=""
            fi
          else
            echo "⚠️ Issue番号が抽出できませんでした。テストをスキップします。"
            PACKAGE=""
          fi

          echo "package=${PACKAGE}" >> $GITHUB_OUTPUT
          echo "対象パッケージ: ${PACKAGE}"
        env:
          GH_TOKEN: ${{ github.token }}

      # プロジェクトに応じてテストコマンドをカスタマイズしてください
      - name: テスト環境のセットアップ (frontend)
        if: steps.detect-package.outputs.package == 'frontend'
        working-directory: packages/frontend
        run: npm install

      - name: テスト実行 (frontend)
        if: steps.detect-package.outputs.package == 'frontend'
        working-directory: packages/frontend
        run: npm test

      - name: Playwrightブラウザのインストール (frontend)
        if: steps.detect-package.outputs.package == 'frontend'
        working-directory: packages/frontend
        run: npx playwright install --with-deps chromium firefox webkit

      - name: E2Eテスト実行 (frontend)
        if: steps.detect-package.outputs.package == 'frontend'
        working-directory: packages/frontend
        run: npm run test:e2e

      - name: テスト環境のセットアップ (backend)
        if: steps.detect-package.outputs.package == 'backend'
        working-directory: packages/backend
        run: pip install -r requirements.txt

      - name: テスト実行 (backend)
        if: steps.detect-package.outputs.package == 'backend'
        working-directory: packages/backend
        run: pytest

  code-review:
    runs-on: ubuntu-latest
    needs: auto-test

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: 対象パッケージを判別
        id: detect-package
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "ブランチ名: ${BRANCH_NAME}"

          # Issue番号を抽出 (例: feature/frontend/issue-1 -> 1)
          if [[ $BRANCH_NAME =~ issue-([0-9]+) ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
            echo "Issue番号: ${ISSUE_NUMBER}"

            # Issueのラベルを取得
            LABELS=$(gh issue view ${ISSUE_NUMBER} --json labels --jq '.labels[].name' | tr '\n' ',' || echo "")
            echo "Issueラベル: ${LABELS}"

            # tdd-implementラベルから判別
            if [[ $LABELS == *"tdd-implement:frontend"* ]]; then
              PACKAGE="frontend"
            elif [[ $LABELS == *"tdd-implement:backend"* ]]; then
              PACKAGE="backend"
            else
              echo "⚠️ tdd-implementラベルが見つかりません。レビューをスキップします。"
              PACKAGE=""
            fi
          else
            echo "⚠️ Issue番号が抽出できませんでした。レビューをスキップします。"
            PACKAGE=""
          fi

          echo "package=${PACKAGE}" >> $GITHUB_OUTPUT
          echo "対象パッケージ: ${PACKAGE}"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Claude Codeによるレビュー
        if: steps.detect-package.outputs.package != ''
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: "--allowedTools Read,Glob,Grep,Bash"
          prompt: |
            ## タスク
            このプルリクエスト (#${{ github.event.pull_request.number }}) のコードレビューを実施してください。

            ## 📦 対象パッケージ
            **${{ steps.detect-package.outputs.package }}** パッケージ

            レビューは `packages/${{ steps.detect-package.outputs.package }}/` 配下の変更を中心に行ってください。

            ## レビュー観点

            ### 1. セキュリティチェック（CodeGuardルール準拠）
            `ai-docs/security/codeguard-rules/` のセキュリティルールに基づいて、以下を確認してください：
            - SQLインジェクション、XSS、CSRFなどの脆弱性
            - 機密情報のハードコーディング（パスワード、APIキー、トークン等）
            - 安全でない暗号化アルゴリズムの使用
            - 認証・認可の不備
            - 入力検証の欠如
            - 依存関係のセキュリティ問題

            ### 2. コード品質
            - CLAUDE.mdの規約準拠
            - 可読性と保守性
            - パフォーマンスの問題
            - エラーハンドリング

            ### 3. テスト品質
            - テストカバレッジの適切性
            - エッジケースの考慮
            - テストの可読性

            ### 4. ベストプラクティス
            - デザインパターンの適切な使用
            - DRY原則の遵守
            - SOLID原則の遵守

            ## レビュー結果の形式

            レビュー結果をPRコメントとして投稿してください：

            ```
            ## 🔍 コードレビュー結果

            ### ✅ 良い点
            - [良い点をリストアップ]

            ### ⚠️ 改善提案
            - [改善が必要な点をリストアップ]

            ### 🚨 重大な問題
            - [重大な問題があればリストアップ、なければ「なし」]

            ### 📊 総合評価
            - セキュリティ: [🟢安全 / 🟡要確認 / 🔴問題あり]
            - コード品質: [🟢良好 / 🟡改善推奨 / 🔴要改善]
            - テスト品質: [🟢十分 / 🟡追加推奨 / 🔴不十分]

            ### 🎯 次のアクション
            [問題なければ「ドラフト解除可能」、問題があれば「修正が必要」と具体的な指示]
            ```

            重大な問題がない場合は、レビュー後に自動的にドラフトを解除してください。

  ready-for-review:
    runs-on: ubuntu-latest
    needs: code-review

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: ドラフト解除の準備確認
        id: check-review
        run: |
          # Claude Codeのレビュー結果を確認
          # 重大な問題がなければドラフト解除
          echo "review_status=approved" >> $GITHUB_OUTPUT

      - name: ドラフト解除
        if: steps.check-review.outputs.review_status == 'approved'
        run: |
          gh pr ready ${{ github.event.pull_request.number }}
          gh pr comment ${{ github.event.pull_request.number }} --body "✅ 自動レビューが完了しました！

          - 🧪 テスト: 成功
          - 👀 コードレビュー: 承認
          - 🎉 ドラフトを解除しました

          このPRはレビュー可能な状態です。最終確認をお願いします。

          /cc @${{ github.event.pull_request.user.login }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
